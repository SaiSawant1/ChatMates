// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider  = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Profile {
  id String @id @default(cuid())
  userID   String @unique
  name     String
  imageUrl String
  email    String

  servers  Server[]
  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id String @id @default(cuid())
  name       String
  imageUrl   String
  inviteCode String @unique

  profileId String  
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(cuid())
  role      MemberRole @default(GUEST)
  profileId String     
  profile   Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String 
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  directMessages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id String @id @default(cuid())
  name String
  type ChannelType @default(TEXT)

  profileId String  
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String 
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id String @id @default(cuid())
  content   String
  fileUrl   String?
  memberId  String  
  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String  
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  delete Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(cuid())
  memberOneId String 
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String 
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id String @id @default(cuid())
  content String
  fileUrl String?

  memberId String 
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String      
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}
